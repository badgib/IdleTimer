<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, November 21, 2024, 6:09 PM -->
<!-- MuClient version 5.06 -->

<!-- Plugin "IdleTimer" generated by Plugin Wizard -->

<muclient>
    <plugin
      name="IdleTimer"
      author="gib"
      id="8d75e5c938b0df70ebbad61b"
      language="Lua"
      purpose="To show time left to idling out"
      date_written="2024-11-21 18:07:06"
      requires="5.06"
      version="0.23"
      save_state="y"
      >

    </plugin>

    <!--  Script  -->

    <script>
        <![CDATA[
            -- MUSHclient script: Countdown Timer that resets on user message
            -- Countdown timer duration in seconds (30 minutes)
            countdown_duration = 30 * 60
            remaining_time = countdown_duration
            timer_name = "CountdownTimer"
            b_win_visibility = true
            back_colour = "black"

            font_colour = "green"
            font_size = 32

            window_width = 135
            window_height = 45
            timer_window_x = 0
            timer_window_y = 0
            timer_window = GetPluginID()

            -- Timer callback function to decrement the countdown
            function TimerCallback()
                if remaining_time > 0 then
                    remaining_time = remaining_time - 1
                    UpdateWindow()
                else
                    ColourNote("red", "black", "Time's up!")
                    DeleteTimer(timer_name) -- Stop the timer when countdown finishes
                end
            end

            -- Event handler for user-sent messages
            function OnPluginSent(text)
                remaining_time = countdown_duration - 1 -- Reset the timer
                UpdateWindow()
                AddTimer(
                    timer_name,                 -- Timer name
                    0,                          -- Hour (not used for periodic timer)
                    0,                          -- Minute (not used for periodic timer)
                    1,                          -- Second interval for periodic timer
                    "",                         -- No response text sent to the server
                    timer_flag.Enabled +        -- Enable the timer
                    timer_flag.Replace,         -- Replace existing timer with the same name
                    "TimerCallback"            -- Callback function
                )
            end
            
            -- Clean up when plugin is disabled
            function OnPluginDisable()
                DeleteTimer(timer_name)
            end

            function OnPluginSaveState()

                SaveTheVars()
            end

            function SaveTheVars()

                SetVariable("back_colour", back_colour)
                SetVariable("timer_window_x", timer_window_x)
                SetVariable("timer_window_y", timer_window_y)
                SetVariable("window_height", window_height)
                SetVariable("window_width", window_width)
                SetVariable("font_colour", font_colour)
                SetVariable("font_size", font_size)
            end
            
            function LoadTheVars()

                back_colour = GetVariable("back_colour")
                if back_colour == nil then

                    back_colour = "black"
                end

                timer_window_x = tonumber(GetVariable("timer_window_x"))
                if timer_window_x == nil then

                    timer_window_x = 0
                end

                timer_window_y = tonumber(GetVariable("timer_window_y"))
                if timer_window_y == nil then

                    timer_window_y = 0
                end

                window_height = tonumber(GetVariable("window_height"))
                if window_height == nil then

                    window_height = 45
                end

                window_width = tonumber(GetVariable("window_width"))
                if window_width == nil then

                    window_width = 135
                end

                font_colour = GetVariable("font_colour")
                if font_colour == nil then

                    font_colour = "green"
                end

                font_size = tonumber(GetVariable("font_size"))
                if font_size == nil then

                    font_size = 32
                end
            end

            function SetSize(_, _, wildcards)

                if(wildcards[1] == nil or wildcards[2] == nil) then

                    ColourNote("red", "black", "Two arguments required, window width and height, separated by space.")
                    return
                end
                WindowResize(timer_window, tonumber(wildcards[1]), tonumber(wildcards[2]), ColourNameToRGB(back_colour))
                UpdateWindow()
            end

            function SetColour(_, _, wildcards)

                if(wildcards[1] == nil or wildcards[2] == nil) then

                    ColourNote("red", "black", "Two arguments required, font colour and background colour, separated by space.")
                    return
                end

                font_colour = tostring(wildcards[1])
                back_colour = tostring(wildcards[2])
                UpdateWindow()
            end

            function SetFont(_, _, wildcards)

                if(wildcards[1] == nil) then

                    ColourNote("red", "black", "One argument required, font size.")
                    return
                end

                font_size = tonumber(wildcards[1])
                WindowFont(timer_window, "f", "Fixedsys", font_size  , true, false, false, false)
                UpdateWindow()
            end

            function ToggleWindow()

                if b_win_visibility == false then

                    WindowShow(timer_window, true)
                    b_win_visibility = true
                    UpdateWindow()
                else
                    WindowShow(timer_window, false)
                    b_win_visibility = false
                end
            end

            function MouseDownHotspot(flags, hotspot_id)

                hs_start_x, hs_start_y = WindowInfo(timer_window, 14), WindowInfo(timer_window, 15)
            end

            function DragMoveHotspot(flags, hotspot_id)
                local hs_pos_x, hs_pos_y = WindowInfo(timer_window, 17), WindowInfo(timer_window, 18)

                timer_window_x = hs_pos_x - hs_start_x
                timer_window_y = hs_pos_y - hs_start_y
                WindowPosition(timer_window, timer_window_x, timer_window_y, 0, 2);

                if hs_pos_x < 0 or hs_pos_x > GetInfo(281) or
                    hs_pos_y < 0 or hs_pos_y > GetInfo(280) then
                    check(SetCursor(11))
                else
                    check(SetCursor(1))
                end
            end

            function MouseUpHotspot(flags, hotspot_id)

                SaveTheVars()
                SaveState()
            end

            function UpdateWindow()

              local minutes = math.floor(remaining_time / 60)
              local seconds = remaining_time % 60
              
              WindowRectOp(timer_window, miniwin.rect_fill, 0, 0, 0, 0, ColourNameToRGB(back_colour))
              
              -- ColourNote("green", "black", string.format("Countdown: %02d:%02d remaining", minutes, seconds))
              WindowText(timer_window, "f", string.format("%02d:%02d", minutes, seconds),
                    5, 0, 0, 0,  -- rectangle
                    ColourNameToRGB(font_colour), 
                    false) -- not Unicode

            end

            function InitWindow()

                LoadTheVars()
                if timer_window_x == 0 and timer_window_y == 0 then

                    WindowCreate(timer_window, 0, 0, window_width, window_height, 12, 0, ColourNameToRGB(back_colour))  -- create window
                else
                    WindowCreate(timer_window, timer_window_x, timer_window_y, window_width, window_height, 12, 2, ColourNameToRGB(back_colour))
                end
                WindowFont(timer_window, "f", "Fixedsys", font_size  , true, false, false, false)
                
                OnPluginSent()
                UpdateWindow()

                -- make a hotspot
                WindowAddHotspot(timer_window, "hs1",  
                                0, 0, window_width, window_height,
                                "",   -- MouseOver
                                "",   -- CancelMouseOver
                                "MouseDownHotspot",
                                "MouseUpHotspot", 
                                "", 
                                "",  -- tooltip text
                                0, 0)  -- hand cursor
                                
                WindowDragHandler(timer_window, "hs1", "DragMoveHotspot", "", 0) 

                WindowShow (timer_window,  true)  -- show it 
            end

            InitWindow()

        ]]>
    </script>

    <aliases>
        <alias
            script="ToggleWindow"
            match="!timer toggle"
            enabled="y"
            sequence="10"
            ignore_case="y"
            regexp="n"
        >
        </alias>

        <alias
            script="SetSize"
            match="!timer size (.+) (.+)"
            enabled="y"
            sequence="11"
            ignore_case="y"
            regexp="y"
        >
        </alias>

        <alias
            script="SetColour"
            match="!timer colour (.+) (.+)"
            enabled="y"
            sequence="11"
            ignore_case="y"
            regexp="y"
        >
        </alias>

        <alias
            script="SetFont"
            match="!timer font (.+)"
            enabled="y"
            sequence="11"
            ignore_case="y"
            regexp="y"
        >
        </alias>

      </aliases>

</muclient>
